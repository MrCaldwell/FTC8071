#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  motorB,           ,             tmotorNXT, PIDControl, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     motorE,        tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     motorD,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C2_1,    servo1,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    servo2,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoStandard)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                           Tele-Operation Mode Code Template
//
// This file contains a template for simplified creation of an tele-op program for an FTC
// competition.
//
// You need to customize two functions with code unique to your specific robot.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.


/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                    initializeRobot
//
// Prior to the start of tele-op mode, you may want to perform some initialization on your robot
// and the variables within your program.
//
// In most cases, you may not have to add any code to this function and it will remain "empty".
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void initializeRobot()
{
  // Place code here to sinitialize servos to starting positions.
  // Sensors are automatically configured and setup by ROBOTC. They may need a brief time to stabilize.

	//servo[servo1] = 90;
	//servo[servo3] = 90;


  return;
}

int loopCount = 0;

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                         Main Task
//
// The following is the main code for the tele-op robot operation. Customize as appropriate for
// your specific robot.
//
// Game controller / joystick information is sent periodically (about every 50 milliseconds) from
// the FMS (Field Management System) to the robot. Most tele-op programs will follow the following
// logic:
//   1. Loop forever repeating the following actions:
//   2. Get the latest game controller / joystick settings that have been received from the PC.
//   3. Perform appropriate actions based on the joystick + buttons settings. This is usually a
//    `  simple action:
//      *  Joystick values are usually directly translated into power levels for a motor or
//         position of a servo.
//      *  Buttons are usually used to start/stop a motor or cause a servo to move to a specific
//         position.
//   4. Repeat the loop.
//
// Your program needs to continuously loop because you need to continuously respond to changes in
// the game controller settings.
//
// At the end of the tele-op period, the FMS will autonmatically abort (stop) execution of the program.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

task main()
{
	loopCount++;

  initializeRobot();

  waitForStart();   // wait for start of tele-op phase

  //servo[servo1] = -180 * 1.416;
  //servo[servo2] = 180 * 1.416;

  while (true)
  {
	  ///////////////////////////////////////////////////////////
	  ///////////////////////////////////////////////////////////
	  ////                                                   ////
	  ////      Add your robot specific tele-op code here.   ////
	  ////                                                   ////
	  ///////////////////////////////////////////////////////////
	  ///////////////////////////////////////////////////////////

  	//Driving
		getJoystickSettings(joystick);
    motor[motorD] = joystick.joy1_y1 * -1;
    motor[motorE] = joystick.joy1_y2;

    //Lowering the plow
		if(joy1Btn(08) && servo[servo3] >= 86) // && loopCount == 3)
		{
			servo[servo1] += 1;
      servo[servo3] -= 1;
		}

		//Raising the plow
		if(joy1Btn(06))
		{
			servo[servo1] -= 1;
			servo[servo3] += 1;
		}

		//Gate closing
		if(joy1Btn(07) && servo[servo2] <= 150)
		{
			servo[servo2] += 1;
		}

		//Gate opening
		if(joy1Btn(05) && servo[servo2] >= 35)
		{
			servo[servo2] -= 1;
		}

		//The flag spinner
		if(joy1Btn(02))
		{
			motor[motorA] = 100;
			motor[motorB] = 100;
		}

		//Slowly spinning flag
		if(joy1Btn(03))
		{
			motor[motorA] = 5;
			motor[motorB] = 5;
		}

		//Stopping flag spinner
		if(joy1Btn(04))
		{
			motor[motorA] = 0;
			motor[motorB] =  0;
		}
    // Insert code to have servos and motors respond to joystick and button values.



    // Look in the ROBOTC samples folder for programs that may be similar to what you want to perform.
    // You may be able to find "snippets" of code that are similar to the functions that you want to
    // perform.
  }
}
