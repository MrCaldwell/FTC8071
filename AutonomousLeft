
#pragma config(Hubs,  S1, HTMotor,  HTServo,  none,     none)
#pragma config(Motor,  mtr_S1_C1_1,     ,              tmotorNone, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     ,              tmotorNone, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                           Autonomous Mode Code Template
//
// This file contains a template for simplified creation of an autonomous program for an TETRIX robot
// competition.
//
// You need to customize two functions with code unique to your specific robot.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include "JoystickDriver.c"  //Include file to "handle" the Bluetooth messages.


/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                    initializeRobot
//
// Prior to the start of autonomous mode, you may want to perform some initialization on your robot.
// Things that might be performed during initialization include:
//   1. Move motors and servos to a preset position.
//   2. Some sensor types take a short while to reach stable values during which time it is best that
//      robot is not moving. For example, gyro sensor needs a few seconds to obtain the background
//      "bias" value.
//
// In many cases, you may not have to add any code to this function and it will remain "empty".
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void initializeRobot()
{
  // Place code here to sinitialize servos to starting positions.
  // Sensors are automatically configured and setup by ROBOTC. They may need a brief time to stabilize.

  return;
}

int diameter = 2.75;
int distance = 65;

int rotations = distance / (diameter*3.14);

//int servoLocation1 = ServoValue[servo1];
//int servoLocation3 = ServoValue[servo3];

/////////////////////////////////////////////////////////////////////////////////////////////////////
//
//                                         Main Task
//
// The following is the main code for the autonomous robot operation. Customize as appropriate for
// your specific robot.
//
// The types of things you might do during the autonomous phase (for the 2008-9 FTC competition)
// are:
//
//   1. Have the robot follow a line on the game field until it reaches one of the puck storage
//      areas.
//   2. Load pucks into the robot from the storage bin.
//   3. Stop the robot and wait for autonomous phase to end.
//
// This simple template does nothing except play a periodic tone every few seconds.
//
// At the end of the autonomous period, the FMS will autonmatically abort (stop) execution of the program.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////

void StWars()
{
  //        180 = Tempo
  //          5 = Default octave
  //    Quarter = Default note length
  //        10% = Break between notes
  //
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  932,   90); wait1Msec(1000);  // Note(A#, Duration(Half .))
  PlayTone( 1047,   90); wait1Msec(1000);  // Note(F6, Duration(Half .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  784,   15); wait1Msec( 167);  // Note(C6, Duration(Eighth))
  PlayTone( 1398,   90); wait1Msec(1000);  // Note(A#6, Duration(Half .))
  PlayTone( 1047,   45); wait1Msec( 500);  // Note(F6, Duration(Quarter .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  784,   15); wait1Msec( 167);  // Note(C6, Duration(Eighth))
  PlayTone( 1398,   90); wait1Msec(1000);  // Note(A#6, Duration(Half .))
  PlayTone( 1047,   45); wait1Msec( 500);  // Note(F6, Duration(Quarter .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  784,   60); wait1Msec( 667);  // Note(C6, Duration(Half))
  PlayTone(    0,   30); wait1Msec( 333);  // Note(Rest)
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  698,   15); wait1Msec( 167);  // Note(F, Duration(Eighth))
  PlayTone(  932,   90); wait1Msec(1000);  // Note(A#, Duration(Half .))
  PlayTone( 1047,   90); wait1Msec(1000);  // Note(F6, Duration(Half .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  784,   15); wait1Msec( 167);  // Note(C6, Duration(Eighth))
  PlayTone( 1398,   90); wait1Msec(1000);  // Note(A#6, Duration(Half .))
  PlayTone( 1047,   45); wait1Msec( 500);  // Note(F6, Duration(Quarter .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  784,   15); wait1Msec( 167);  // Note(C6, Duration(Eighth))
  PlayTone( 1398,   90); wait1Msec(1000);  // Note(A#6, Duration(Half .))
  PlayTone( 1047,   45); wait1Msec( 500);  // Note(F6, Duration(Quarter .))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  880,   15); wait1Msec( 167);  // Note(D6, Duration(Eighth))
  PlayTone(  933,   15); wait1Msec( 167);  // Note(D#6, Duration(Eighth))
  PlayTone(  784,   60); wait1Msec( 667);  // Note(C6, Duration(Half))
  return;
}






task main()
{
  initializeRobot();

  waitForStart(); // Wait for the beginning of autonomous phase.

  ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////
  ////                                                   ////
  ////    Add your robot specific autonomous code here.  ////
  ////                                                   ////
  ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////

  servo[servo1] = 0;//servoLocation1;
  servo[servo3] = 180;//servoLocation3;
  servo[servo2] = 180;

  //Forward
	nMotorEncoder[motorD] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorD] < rotations*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = 100;                 // motor B is given a power level of 75
  	motor[motorE] = -100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)
	//Back
	nMotorEncoder[motorD] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorD] > -12*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = -100;                 // motor B is given a power level of 75
  	motor[motorE] = 100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)

	//Turn Right
	nMotorEncoder[motorE] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorE] > -4*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = 0;                 // motor B is given a power level of 75
  	motor[motorE] = -100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)

	//Forward
	nMotorEncoder[motorD] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorD] < rotations*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = 100;                 // motor B is given a power level of 75
  	motor[motorE] = -100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)

	//Turn Left
	nMotorEncoder[motorE] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorE] < 3*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = 0;                 // motor B is given a power level of 75
  	motor[motorE] = 100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)

	//Forward
	nMotorEncoder[motorD] = 0;          // reset the Motor Encoder of Motor B
	while(nMotorEncoder[motorD] < rotations*360)  // while the Motor Encoder of Motor B has not yet reached 360 counts:
	{
  	motor[motorD] = 100;                 // motor B is given a power level of 75
  	motor[motorE] = -100;                 // motor C is given a power level of 7	5
	}
	motor[motorD] = 0;                  // motor B is given a power level of 0 (stop)
	motor[motorE] = 0;                  // motor C is given a power level of 0 (stop)


  //while (true)
  //{
  	//Left motor
    //motor[motorD] = 50;
    //Right motor
    //motor[motorE] = -50;
    //wait1Msec(3500);
    //motor[motorD] = -50;
   // motor[motorE] = 50;
    //wait1Msec(500);
  //}
}
